/* tslint:disable */
/* eslint-disable */
/**
 * skriptfabrik API
 * This is the specification for the skriptfabrik API.
 *
 * The version of the OpenAPI document: 2.0.0+0fee254
 * Contact: info@skriptfabrik.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClockifyUserResponse } from '../model';
// @ts-ignore
import { ClockifyUserUpdateRequest } from '../model';
// @ts-ignore
import { ClockifyUsersCollectionResponse } from '../model';
// @ts-ignore
import { JsonApiError } from '../model';
/**
 * ClockifyUserApi - axios parameter creator
 * @export
 */
export const ClockifyUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a [Clockify User Resource](/schemas/ClockifyUserResource).
         * @summary Delete Clockify User
         * @param {string} clockifyUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClockifyUser: async (clockifyUserId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clockifyUserId' is not null or undefined
            assertParamExists('deleteClockifyUser', 'clockifyUserId', clockifyUserId)
            const localVarPath = `/api/admin/clockify_users/{clockifyUserId}`
                .replace(`{${"clockifyUserId"}}`, encodeURIComponent(String(clockifyUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a [Clockify User Resource](/schemas/ClockifyUserResource).
         * @summary Retrieve Clockify User
         * @param {string} clockifyUserId 
         * @param {string} [included] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClockifyUser: async (clockifyUserId: string, included?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clockifyUserId' is not null or undefined
            assertParamExists('getClockifyUser', 'clockifyUserId', clockifyUserId)
            const localVarPath = `/api/admin/clockify_users/{clockifyUserId}`
                .replace(`{${"clockifyUserId"}}`, encodeURIComponent(String(clockifyUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (included !== undefined) {
                localVarQueryParameter['included'] = included;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the [Clockify User Resource](/schemas/ClockifyUserResource) collection.
         * @summary Retrieve Clockify User Collection
         * @param {number} [limit] The Limit Query Parameter. 
         * @param {number} [page] The Page Query Parameter. 
         * @param {string} [included] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClockifyUserCollection: async (limit?: number, page?: number, included?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/clockify_users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (included !== undefined) {
                localVarQueryParameter['included'] = included;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a [Clockify User Resource](/schemas/ClockifyUserResource).
         * @summary Update Clockify User
         * @param {string} clockifyUserId 
         * @param {ClockifyUserUpdateRequest} [clockifyUserUpdateRequest] Update Clockify User Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClockifyUser: async (clockifyUserId: string, clockifyUserUpdateRequest?: ClockifyUserUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clockifyUserId' is not null or undefined
            assertParamExists('updateClockifyUser', 'clockifyUserId', clockifyUserId)
            const localVarPath = `/api/admin/clockify_users/{clockifyUserId}`
                .replace(`{${"clockifyUserId"}}`, encodeURIComponent(String(clockifyUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clockifyUserUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClockifyUserApi - functional programming interface
 * @export
 */
export const ClockifyUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClockifyUserApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes a [Clockify User Resource](/schemas/ClockifyUserResource).
         * @summary Delete Clockify User
         * @param {string} clockifyUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClockifyUser(clockifyUserId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClockifyUser(clockifyUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a [Clockify User Resource](/schemas/ClockifyUserResource).
         * @summary Retrieve Clockify User
         * @param {string} clockifyUserId 
         * @param {string} [included] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClockifyUser(clockifyUserId: string, included?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClockifyUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClockifyUser(clockifyUserId, included, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the [Clockify User Resource](/schemas/ClockifyUserResource) collection.
         * @summary Retrieve Clockify User Collection
         * @param {number} [limit] The Limit Query Parameter. 
         * @param {number} [page] The Page Query Parameter. 
         * @param {string} [included] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClockifyUserCollection(limit?: number, page?: number, included?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClockifyUsersCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClockifyUserCollection(limit, page, included, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a [Clockify User Resource](/schemas/ClockifyUserResource).
         * @summary Update Clockify User
         * @param {string} clockifyUserId 
         * @param {ClockifyUserUpdateRequest} [clockifyUserUpdateRequest] Update Clockify User Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClockifyUser(clockifyUserId: string, clockifyUserUpdateRequest?: ClockifyUserUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClockifyUser(clockifyUserId, clockifyUserUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClockifyUserApi - factory interface
 * @export
 */
export const ClockifyUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClockifyUserApiFp(configuration)
    return {
        /**
         * Deletes a [Clockify User Resource](/schemas/ClockifyUserResource).
         * @summary Delete Clockify User
         * @param {ClockifyUserApiDeleteClockifyUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClockifyUser(requestParameters: ClockifyUserApiDeleteClockifyUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteClockifyUser(requestParameters.clockifyUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a [Clockify User Resource](/schemas/ClockifyUserResource).
         * @summary Retrieve Clockify User
         * @param {ClockifyUserApiGetClockifyUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClockifyUser(requestParameters: ClockifyUserApiGetClockifyUserRequest, options?: AxiosRequestConfig): AxiosPromise<ClockifyUserResponse> {
            return localVarFp.getClockifyUser(requestParameters.clockifyUserId, requestParameters.included, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the [Clockify User Resource](/schemas/ClockifyUserResource) collection.
         * @summary Retrieve Clockify User Collection
         * @param {ClockifyUserApiGetClockifyUserCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClockifyUserCollection(requestParameters: ClockifyUserApiGetClockifyUserCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ClockifyUsersCollectionResponse> {
            return localVarFp.getClockifyUserCollection(requestParameters.limit, requestParameters.page, requestParameters.included, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a [Clockify User Resource](/schemas/ClockifyUserResource).
         * @summary Update Clockify User
         * @param {ClockifyUserApiUpdateClockifyUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClockifyUser(requestParameters: ClockifyUserApiUpdateClockifyUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateClockifyUser(requestParameters.clockifyUserId, requestParameters.clockifyUserUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteClockifyUser operation in ClockifyUserApi.
 * @export
 * @interface ClockifyUserApiDeleteClockifyUserRequest
 */
export interface ClockifyUserApiDeleteClockifyUserRequest {
    /**
     * 
     * @type {string}
     * @memberof ClockifyUserApiDeleteClockifyUser
     */
    readonly clockifyUserId: string
}

/**
 * Request parameters for getClockifyUser operation in ClockifyUserApi.
 * @export
 * @interface ClockifyUserApiGetClockifyUserRequest
 */
export interface ClockifyUserApiGetClockifyUserRequest {
    /**
     * 
     * @type {string}
     * @memberof ClockifyUserApiGetClockifyUser
     */
    readonly clockifyUserId: string

    /**
     * The Include Query Parameter.
     * @type {string}
     * @memberof ClockifyUserApiGetClockifyUser
     */
    readonly included?: string
}

/**
 * Request parameters for getClockifyUserCollection operation in ClockifyUserApi.
 * @export
 * @interface ClockifyUserApiGetClockifyUserCollectionRequest
 */
export interface ClockifyUserApiGetClockifyUserCollectionRequest {
    /**
     * The Limit Query Parameter. 
     * @type {number}
     * @memberof ClockifyUserApiGetClockifyUserCollection
     */
    readonly limit?: number

    /**
     * The Page Query Parameter. 
     * @type {number}
     * @memberof ClockifyUserApiGetClockifyUserCollection
     */
    readonly page?: number

    /**
     * The Include Query Parameter.
     * @type {string}
     * @memberof ClockifyUserApiGetClockifyUserCollection
     */
    readonly included?: string
}

/**
 * Request parameters for updateClockifyUser operation in ClockifyUserApi.
 * @export
 * @interface ClockifyUserApiUpdateClockifyUserRequest
 */
export interface ClockifyUserApiUpdateClockifyUserRequest {
    /**
     * 
     * @type {string}
     * @memberof ClockifyUserApiUpdateClockifyUser
     */
    readonly clockifyUserId: string

    /**
     * Update Clockify User Request
     * @type {ClockifyUserUpdateRequest}
     * @memberof ClockifyUserApiUpdateClockifyUser
     */
    readonly clockifyUserUpdateRequest?: ClockifyUserUpdateRequest
}

/**
 * ClockifyUserApi - object-oriented interface
 * @export
 * @class ClockifyUserApi
 * @extends {BaseAPI}
 */
export class ClockifyUserApi extends BaseAPI {
    /**
     * Deletes a [Clockify User Resource](/schemas/ClockifyUserResource).
     * @summary Delete Clockify User
     * @param {ClockifyUserApiDeleteClockifyUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClockifyUserApi
     */
    public deleteClockifyUser(requestParameters: ClockifyUserApiDeleteClockifyUserRequest, options?: AxiosRequestConfig) {
        return ClockifyUserApiFp(this.configuration).deleteClockifyUser(requestParameters.clockifyUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a [Clockify User Resource](/schemas/ClockifyUserResource).
     * @summary Retrieve Clockify User
     * @param {ClockifyUserApiGetClockifyUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClockifyUserApi
     */
    public getClockifyUser(requestParameters: ClockifyUserApiGetClockifyUserRequest, options?: AxiosRequestConfig) {
        return ClockifyUserApiFp(this.configuration).getClockifyUser(requestParameters.clockifyUserId, requestParameters.included, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the [Clockify User Resource](/schemas/ClockifyUserResource) collection.
     * @summary Retrieve Clockify User Collection
     * @param {ClockifyUserApiGetClockifyUserCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClockifyUserApi
     */
    public getClockifyUserCollection(requestParameters: ClockifyUserApiGetClockifyUserCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ClockifyUserApiFp(this.configuration).getClockifyUserCollection(requestParameters.limit, requestParameters.page, requestParameters.included, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a [Clockify User Resource](/schemas/ClockifyUserResource).
     * @summary Update Clockify User
     * @param {ClockifyUserApiUpdateClockifyUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClockifyUserApi
     */
    public updateClockifyUser(requestParameters: ClockifyUserApiUpdateClockifyUserRequest, options?: AxiosRequestConfig) {
        return ClockifyUserApiFp(this.configuration).updateClockifyUser(requestParameters.clockifyUserId, requestParameters.clockifyUserUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
