/* tslint:disable */
/* eslint-disable */
/**
 * skriptfabrik API
 * This is the specification for the skriptfabrik API.
 *
 * The version of the OpenAPI document: 2.0.0+0fee254
 * Contact: info@skriptfabrik.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JsonApiError } from '../model';
// @ts-ignore
import { MocoServiceCollectionResponse } from '../model';
// @ts-ignore
import { MocoServiceCreateRequest } from '../model';
// @ts-ignore
import { MocoServiceResponse } from '../model';
// @ts-ignore
import { MocoServiceUpdateRequest } from '../model';
/**
 * MOCOServiceApi - axios parameter creator
 * @export
 */
export const MOCOServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a [MOCO Service Resource](/schemas/MocoServiceResource).
         * @summary Create MOCO Service
         * @param {string} [include] The Include Query Parameter.
         * @param {MocoServiceCreateRequest} [mocoServiceCreateRequest] Create MOCO Service Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMocoService: async (include?: string, mocoServiceCreateRequest?: MocoServiceCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/moco_services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mocoServiceCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a [MOCO Service Resource](/schemas/MocoServiceResource).
         * @summary Delete MOCO Service
         * @param {string} mocoServiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMocoService: async (mocoServiceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mocoServiceId' is not null or undefined
            assertParamExists('deleteMocoService', 'mocoServiceId', mocoServiceId)
            const localVarPath = `/api/admin/moco_services/{mocoServiceId}`
                .replace(`{${"mocoServiceId"}}`, encodeURIComponent(String(mocoServiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a [MOCO Service Resource](/schemas/MocoServiceResource).
         * @summary Retrieve MOCO Service
         * @param {string} mocoServiceId 
         * @param {string} [include] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMocoService: async (mocoServiceId: string, include?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mocoServiceId' is not null or undefined
            assertParamExists('getMocoService', 'mocoServiceId', mocoServiceId)
            const localVarPath = `/api/admin/moco_services/{mocoServiceId}`
                .replace(`{${"mocoServiceId"}}`, encodeURIComponent(String(mocoServiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the [MOCO Service Resource](/schemas/MocoServiceResource) collection.
         * @summary Retrieve MOCO Service Collection
         * @param {number} [limit] The Limit Query Parameter. 
         * @param {number} [page] The Page Query Parameter. 
         * @param {string} [included] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMocoServiceCollection: async (limit?: number, page?: number, included?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/moco_services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (included !== undefined) {
                localVarQueryParameter['included'] = included;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a [MOCO Service Resource](/schemas/MocoServiceResource).
         * @summary Update MOCO Service
         * @param {string} mocoServiceId 
         * @param {MocoServiceUpdateRequest} [mocoServiceUpdateRequest] Update MOCO Service Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMocoService: async (mocoServiceId: string, mocoServiceUpdateRequest?: MocoServiceUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mocoServiceId' is not null or undefined
            assertParamExists('updateMocoService', 'mocoServiceId', mocoServiceId)
            const localVarPath = `/api/admin/moco_services/{mocoServiceId}`
                .replace(`{${"mocoServiceId"}}`, encodeURIComponent(String(mocoServiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mocoServiceUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MOCOServiceApi - functional programming interface
 * @export
 */
export const MOCOServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MOCOServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a [MOCO Service Resource](/schemas/MocoServiceResource).
         * @summary Create MOCO Service
         * @param {string} [include] The Include Query Parameter.
         * @param {MocoServiceCreateRequest} [mocoServiceCreateRequest] Create MOCO Service Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMocoService(include?: string, mocoServiceCreateRequest?: MocoServiceCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MocoServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMocoService(include, mocoServiceCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a [MOCO Service Resource](/schemas/MocoServiceResource).
         * @summary Delete MOCO Service
         * @param {string} mocoServiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMocoService(mocoServiceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMocoService(mocoServiceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a [MOCO Service Resource](/schemas/MocoServiceResource).
         * @summary Retrieve MOCO Service
         * @param {string} mocoServiceId 
         * @param {string} [include] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMocoService(mocoServiceId: string, include?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MocoServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMocoService(mocoServiceId, include, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the [MOCO Service Resource](/schemas/MocoServiceResource) collection.
         * @summary Retrieve MOCO Service Collection
         * @param {number} [limit] The Limit Query Parameter. 
         * @param {number} [page] The Page Query Parameter. 
         * @param {string} [included] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMocoServiceCollection(limit?: number, page?: number, included?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MocoServiceCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMocoServiceCollection(limit, page, included, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a [MOCO Service Resource](/schemas/MocoServiceResource).
         * @summary Update MOCO Service
         * @param {string} mocoServiceId 
         * @param {MocoServiceUpdateRequest} [mocoServiceUpdateRequest] Update MOCO Service Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMocoService(mocoServiceId: string, mocoServiceUpdateRequest?: MocoServiceUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMocoService(mocoServiceId, mocoServiceUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MOCOServiceApi - factory interface
 * @export
 */
export const MOCOServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MOCOServiceApiFp(configuration)
    return {
        /**
         * Creates a [MOCO Service Resource](/schemas/MocoServiceResource).
         * @summary Create MOCO Service
         * @param {MOCOServiceApiCreateMocoServiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMocoService(requestParameters: MOCOServiceApiCreateMocoServiceRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MocoServiceResponse> {
            return localVarFp.createMocoService(requestParameters.include, requestParameters.mocoServiceCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a [MOCO Service Resource](/schemas/MocoServiceResource).
         * @summary Delete MOCO Service
         * @param {MOCOServiceApiDeleteMocoServiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMocoService(requestParameters: MOCOServiceApiDeleteMocoServiceRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMocoService(requestParameters.mocoServiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a [MOCO Service Resource](/schemas/MocoServiceResource).
         * @summary Retrieve MOCO Service
         * @param {MOCOServiceApiGetMocoServiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMocoService(requestParameters: MOCOServiceApiGetMocoServiceRequest, options?: AxiosRequestConfig): AxiosPromise<MocoServiceResponse> {
            return localVarFp.getMocoService(requestParameters.mocoServiceId, requestParameters.include, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the [MOCO Service Resource](/schemas/MocoServiceResource) collection.
         * @summary Retrieve MOCO Service Collection
         * @param {MOCOServiceApiGetMocoServiceCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMocoServiceCollection(requestParameters: MOCOServiceApiGetMocoServiceCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MocoServiceCollectionResponse> {
            return localVarFp.getMocoServiceCollection(requestParameters.limit, requestParameters.page, requestParameters.included, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a [MOCO Service Resource](/schemas/MocoServiceResource).
         * @summary Update MOCO Service
         * @param {MOCOServiceApiUpdateMocoServiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMocoService(requestParameters: MOCOServiceApiUpdateMocoServiceRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMocoService(requestParameters.mocoServiceId, requestParameters.mocoServiceUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createMocoService operation in MOCOServiceApi.
 * @export
 * @interface MOCOServiceApiCreateMocoServiceRequest
 */
export interface MOCOServiceApiCreateMocoServiceRequest {
    /**
     * The Include Query Parameter.
     * @type {string}
     * @memberof MOCOServiceApiCreateMocoService
     */
    readonly include?: string

    /**
     * Create MOCO Service Request
     * @type {MocoServiceCreateRequest}
     * @memberof MOCOServiceApiCreateMocoService
     */
    readonly mocoServiceCreateRequest?: MocoServiceCreateRequest
}

/**
 * Request parameters for deleteMocoService operation in MOCOServiceApi.
 * @export
 * @interface MOCOServiceApiDeleteMocoServiceRequest
 */
export interface MOCOServiceApiDeleteMocoServiceRequest {
    /**
     * 
     * @type {string}
     * @memberof MOCOServiceApiDeleteMocoService
     */
    readonly mocoServiceId: string
}

/**
 * Request parameters for getMocoService operation in MOCOServiceApi.
 * @export
 * @interface MOCOServiceApiGetMocoServiceRequest
 */
export interface MOCOServiceApiGetMocoServiceRequest {
    /**
     * 
     * @type {string}
     * @memberof MOCOServiceApiGetMocoService
     */
    readonly mocoServiceId: string

    /**
     * The Include Query Parameter.
     * @type {string}
     * @memberof MOCOServiceApiGetMocoService
     */
    readonly include?: string
}

/**
 * Request parameters for getMocoServiceCollection operation in MOCOServiceApi.
 * @export
 * @interface MOCOServiceApiGetMocoServiceCollectionRequest
 */
export interface MOCOServiceApiGetMocoServiceCollectionRequest {
    /**
     * The Limit Query Parameter. 
     * @type {number}
     * @memberof MOCOServiceApiGetMocoServiceCollection
     */
    readonly limit?: number

    /**
     * The Page Query Parameter. 
     * @type {number}
     * @memberof MOCOServiceApiGetMocoServiceCollection
     */
    readonly page?: number

    /**
     * The Include Query Parameter.
     * @type {string}
     * @memberof MOCOServiceApiGetMocoServiceCollection
     */
    readonly included?: string
}

/**
 * Request parameters for updateMocoService operation in MOCOServiceApi.
 * @export
 * @interface MOCOServiceApiUpdateMocoServiceRequest
 */
export interface MOCOServiceApiUpdateMocoServiceRequest {
    /**
     * 
     * @type {string}
     * @memberof MOCOServiceApiUpdateMocoService
     */
    readonly mocoServiceId: string

    /**
     * Update MOCO Service Request
     * @type {MocoServiceUpdateRequest}
     * @memberof MOCOServiceApiUpdateMocoService
     */
    readonly mocoServiceUpdateRequest?: MocoServiceUpdateRequest
}

/**
 * MOCOServiceApi - object-oriented interface
 * @export
 * @class MOCOServiceApi
 * @extends {BaseAPI}
 */
export class MOCOServiceApi extends BaseAPI {
    /**
     * Creates a [MOCO Service Resource](/schemas/MocoServiceResource).
     * @summary Create MOCO Service
     * @param {MOCOServiceApiCreateMocoServiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MOCOServiceApi
     */
    public createMocoService(requestParameters: MOCOServiceApiCreateMocoServiceRequest = {}, options?: AxiosRequestConfig) {
        return MOCOServiceApiFp(this.configuration).createMocoService(requestParameters.include, requestParameters.mocoServiceCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a [MOCO Service Resource](/schemas/MocoServiceResource).
     * @summary Delete MOCO Service
     * @param {MOCOServiceApiDeleteMocoServiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MOCOServiceApi
     */
    public deleteMocoService(requestParameters: MOCOServiceApiDeleteMocoServiceRequest, options?: AxiosRequestConfig) {
        return MOCOServiceApiFp(this.configuration).deleteMocoService(requestParameters.mocoServiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a [MOCO Service Resource](/schemas/MocoServiceResource).
     * @summary Retrieve MOCO Service
     * @param {MOCOServiceApiGetMocoServiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MOCOServiceApi
     */
    public getMocoService(requestParameters: MOCOServiceApiGetMocoServiceRequest, options?: AxiosRequestConfig) {
        return MOCOServiceApiFp(this.configuration).getMocoService(requestParameters.mocoServiceId, requestParameters.include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the [MOCO Service Resource](/schemas/MocoServiceResource) collection.
     * @summary Retrieve MOCO Service Collection
     * @param {MOCOServiceApiGetMocoServiceCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MOCOServiceApi
     */
    public getMocoServiceCollection(requestParameters: MOCOServiceApiGetMocoServiceCollectionRequest = {}, options?: AxiosRequestConfig) {
        return MOCOServiceApiFp(this.configuration).getMocoServiceCollection(requestParameters.limit, requestParameters.page, requestParameters.included, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a [MOCO Service Resource](/schemas/MocoServiceResource).
     * @summary Update MOCO Service
     * @param {MOCOServiceApiUpdateMocoServiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MOCOServiceApi
     */
    public updateMocoService(requestParameters: MOCOServiceApiUpdateMocoServiceRequest, options?: AxiosRequestConfig) {
        return MOCOServiceApiFp(this.configuration).updateMocoService(requestParameters.mocoServiceId, requestParameters.mocoServiceUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
