/* tslint:disable */
/* eslint-disable */
/**
 * skriptfabrik API
 * This is the specification for the skriptfabrik API.
 *
 * The version of the OpenAPI document: 1.1.3+af59792
 * Contact: info@skriptfabrik.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateAccessTokenErrorResponse } from '../model';
// @ts-ignore
import { CreateAccessTokenRequest } from '../model';
// @ts-ignore
import { CreateAccessTokenResponse } from '../model';
// @ts-ignore
import { JsonApiError } from '../model';
/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
export const AuthorizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an Access Token in JWT Format.  The `username` (e-mail address), as well as the `password` of the user is required. Each access token expires after 3600 seconds and must be renewed afterwards.  The JWT must be sent as a bearer token within the `authorization` header with each request to be authorized.
         * @summary Create Access Token
         * @param {CreateAccessTokenRequest} [createAccessTokenRequest] Create Access Token Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessToken: async (createAccessTokenRequest?: CreateAccessTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/access_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAccessTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorizationApi - functional programming interface
 * @export
 */
export const AuthorizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorizationApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an Access Token in JWT Format.  The `username` (e-mail address), as well as the `password` of the user is required. Each access token expires after 3600 seconds and must be renewed afterwards.  The JWT must be sent as a bearer token within the `authorization` header with each request to be authorized.
         * @summary Create Access Token
         * @param {CreateAccessTokenRequest} [createAccessTokenRequest] Create Access Token Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccessToken(createAccessTokenRequest?: CreateAccessTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAccessTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccessToken(createAccessTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthorizationApi - factory interface
 * @export
 */
export const AuthorizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorizationApiFp(configuration)
    return {
        /**
         * Creates an Access Token in JWT Format.  The `username` (e-mail address), as well as the `password` of the user is required. Each access token expires after 3600 seconds and must be renewed afterwards.  The JWT must be sent as a bearer token within the `authorization` header with each request to be authorized.
         * @summary Create Access Token
         * @param {AuthorizationApiCreateAccessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessToken(requestParameters: AuthorizationApiCreateAccessTokenRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateAccessTokenResponse> {
            return localVarFp.createAccessToken(requestParameters.createAccessTokenRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAccessToken operation in AuthorizationApi.
 * @export
 * @interface AuthorizationApiCreateAccessTokenRequest
 */
export interface AuthorizationApiCreateAccessTokenRequest {
    /**
     * Create Access Token Request
     * @type {CreateAccessTokenRequest}
     * @memberof AuthorizationApiCreateAccessToken
     */
    readonly createAccessTokenRequest?: CreateAccessTokenRequest
}

/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
export class AuthorizationApi extends BaseAPI {
    /**
     * Creates an Access Token in JWT Format.  The `username` (e-mail address), as well as the `password` of the user is required. Each access token expires after 3600 seconds and must be renewed afterwards.  The JWT must be sent as a bearer token within the `authorization` header with each request to be authorized.
     * @summary Create Access Token
     * @param {AuthorizationApiCreateAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public createAccessToken(requestParameters: AuthorizationApiCreateAccessTokenRequest = {}, options?: AxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).createAccessToken(requestParameters.createAccessTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
