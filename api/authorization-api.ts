/* tslint:disable */
/* eslint-disable */
/**
 * skriptfabrik API
 * This is the specification for the skriptfabrik API.
 *
 * The version of the OpenAPI document: 2.0.0+0fee254
 * Contact: info@skriptfabrik.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccessTokenCreateErrorResponse } from '../model';
// @ts-ignore
import { AccessTokenCreateRequest } from '../model';
// @ts-ignore
import { AccessTokenRefreshErrorResponse } from '../model';
// @ts-ignore
import { AccessTokenRefreshRequest } from '../model';
// @ts-ignore
import { AccessTokenResponse } from '../model';
// @ts-ignore
import { JsonApiError } from '../model';
// @ts-ignore
import { RefreshTokenInvalidateErrorResponse } from '../model';
// @ts-ignore
import { RefreshTokenInvalidateRequest } from '../model';
// @ts-ignore
import { RefreshTokenInvalidateResponse } from '../model';
/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
export const AuthorizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an Access Token in JWT format.  The `email`, as well as the `password` of the user is required. Each token expires after 3600 seconds and must be renewed afterwards.  The JWT must be sent as a bearer token within the `authorization` header with each request to be authorized.
         * @summary Create Access Token
         * @param {AccessTokenCreateRequest} [accessTokenCreateRequest] Create Access Token Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessToken: async (accessTokenCreateRequest?: AccessTokenCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/access_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accessTokenCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalidates the Refresh Token.  The `refresh_token` can be passed either as cookie or request parameter.
         * @summary Invalidate Refresh Token
         * @param {string} [refreshToken] The Refresh Token as HttpOnly cookie.
         * @param {RefreshTokenInvalidateRequest} [refreshTokenInvalidateRequest] Invalidate Refresh Token Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invalidateRefreshToken: async (refreshToken?: string, refreshTokenInvalidateRequest?: RefreshTokenInvalidateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/access_token/invalidate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenInvalidateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refreshes the Access Token with the provided Refresh Token.  The `refresh_token` can be passed either as cookie or request parameter.
         * @summary Refresh Access Token
         * @param {string} [refreshToken] The Refresh Token as HttpOnly cookie.
         * @param {AccessTokenRefreshRequest} [accessTokenRefreshRequest] Refresh Access Token Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccessToken: async (refreshToken?: string, accessTokenRefreshRequest?: AccessTokenRefreshRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/access_token/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accessTokenRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorizationApi - functional programming interface
 * @export
 */
export const AuthorizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorizationApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an Access Token in JWT format.  The `email`, as well as the `password` of the user is required. Each token expires after 3600 seconds and must be renewed afterwards.  The JWT must be sent as a bearer token within the `authorization` header with each request to be authorized.
         * @summary Create Access Token
         * @param {AccessTokenCreateRequest} [accessTokenCreateRequest] Create Access Token Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccessToken(accessTokenCreateRequest?: AccessTokenCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccessToken(accessTokenCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Invalidates the Refresh Token.  The `refresh_token` can be passed either as cookie or request parameter.
         * @summary Invalidate Refresh Token
         * @param {string} [refreshToken] The Refresh Token as HttpOnly cookie.
         * @param {RefreshTokenInvalidateRequest} [refreshTokenInvalidateRequest] Invalidate Refresh Token Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invalidateRefreshToken(refreshToken?: string, refreshTokenInvalidateRequest?: RefreshTokenInvalidateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshTokenInvalidateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invalidateRefreshToken(refreshToken, refreshTokenInvalidateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Refreshes the Access Token with the provided Refresh Token.  The `refresh_token` can be passed either as cookie or request parameter.
         * @summary Refresh Access Token
         * @param {string} [refreshToken] The Refresh Token as HttpOnly cookie.
         * @param {AccessTokenRefreshRequest} [accessTokenRefreshRequest] Refresh Access Token Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshAccessToken(refreshToken?: string, accessTokenRefreshRequest?: AccessTokenRefreshRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshAccessToken(refreshToken, accessTokenRefreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthorizationApi - factory interface
 * @export
 */
export const AuthorizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorizationApiFp(configuration)
    return {
        /**
         * Creates an Access Token in JWT format.  The `email`, as well as the `password` of the user is required. Each token expires after 3600 seconds and must be renewed afterwards.  The JWT must be sent as a bearer token within the `authorization` header with each request to be authorized.
         * @summary Create Access Token
         * @param {AuthorizationApiCreateAccessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessToken(requestParameters: AuthorizationApiCreateAccessTokenRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AccessTokenResponse> {
            return localVarFp.createAccessToken(requestParameters.accessTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalidates the Refresh Token.  The `refresh_token` can be passed either as cookie or request parameter.
         * @summary Invalidate Refresh Token
         * @param {AuthorizationApiInvalidateRefreshTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invalidateRefreshToken(requestParameters: AuthorizationApiInvalidateRefreshTokenRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RefreshTokenInvalidateResponse> {
            return localVarFp.invalidateRefreshToken(requestParameters.refreshToken, requestParameters.refreshTokenInvalidateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Refreshes the Access Token with the provided Refresh Token.  The `refresh_token` can be passed either as cookie or request parameter.
         * @summary Refresh Access Token
         * @param {AuthorizationApiRefreshAccessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccessToken(requestParameters: AuthorizationApiRefreshAccessTokenRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AccessTokenResponse> {
            return localVarFp.refreshAccessToken(requestParameters.refreshToken, requestParameters.accessTokenRefreshRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAccessToken operation in AuthorizationApi.
 * @export
 * @interface AuthorizationApiCreateAccessTokenRequest
 */
export interface AuthorizationApiCreateAccessTokenRequest {
    /**
     * Create Access Token Request
     * @type {AccessTokenCreateRequest}
     * @memberof AuthorizationApiCreateAccessToken
     */
    readonly accessTokenCreateRequest?: AccessTokenCreateRequest
}

/**
 * Request parameters for invalidateRefreshToken operation in AuthorizationApi.
 * @export
 * @interface AuthorizationApiInvalidateRefreshTokenRequest
 */
export interface AuthorizationApiInvalidateRefreshTokenRequest {
    /**
     * The Refresh Token as HttpOnly cookie.
     * @type {string}
     * @memberof AuthorizationApiInvalidateRefreshToken
     */
    readonly refreshToken?: string

    /**
     * Invalidate Refresh Token Request
     * @type {RefreshTokenInvalidateRequest}
     * @memberof AuthorizationApiInvalidateRefreshToken
     */
    readonly refreshTokenInvalidateRequest?: RefreshTokenInvalidateRequest
}

/**
 * Request parameters for refreshAccessToken operation in AuthorizationApi.
 * @export
 * @interface AuthorizationApiRefreshAccessTokenRequest
 */
export interface AuthorizationApiRefreshAccessTokenRequest {
    /**
     * The Refresh Token as HttpOnly cookie.
     * @type {string}
     * @memberof AuthorizationApiRefreshAccessToken
     */
    readonly refreshToken?: string

    /**
     * Refresh Access Token Request
     * @type {AccessTokenRefreshRequest}
     * @memberof AuthorizationApiRefreshAccessToken
     */
    readonly accessTokenRefreshRequest?: AccessTokenRefreshRequest
}

/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
export class AuthorizationApi extends BaseAPI {
    /**
     * Creates an Access Token in JWT format.  The `email`, as well as the `password` of the user is required. Each token expires after 3600 seconds and must be renewed afterwards.  The JWT must be sent as a bearer token within the `authorization` header with each request to be authorized.
     * @summary Create Access Token
     * @param {AuthorizationApiCreateAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public createAccessToken(requestParameters: AuthorizationApiCreateAccessTokenRequest = {}, options?: AxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).createAccessToken(requestParameters.accessTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalidates the Refresh Token.  The `refresh_token` can be passed either as cookie or request parameter.
     * @summary Invalidate Refresh Token
     * @param {AuthorizationApiInvalidateRefreshTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public invalidateRefreshToken(requestParameters: AuthorizationApiInvalidateRefreshTokenRequest = {}, options?: AxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).invalidateRefreshToken(requestParameters.refreshToken, requestParameters.refreshTokenInvalidateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refreshes the Access Token with the provided Refresh Token.  The `refresh_token` can be passed either as cookie or request parameter.
     * @summary Refresh Access Token
     * @param {AuthorizationApiRefreshAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public refreshAccessToken(requestParameters: AuthorizationApiRefreshAccessTokenRequest = {}, options?: AxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).refreshAccessToken(requestParameters.refreshToken, requestParameters.accessTokenRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
