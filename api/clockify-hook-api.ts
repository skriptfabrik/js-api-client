/* tslint:disable */
/* eslint-disable */
/**
 * skriptfabrik API
 * This is the specification for the skriptfabrik API.
 *
 * The version of the OpenAPI document: 2.1.0+e417cb8
 * Contact: info@skriptfabrik.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClockifyHookCollectionResponse } from '../model';
// @ts-ignore
import { ClockifyHookCreateRequest } from '../model';
// @ts-ignore
import { ClockifyHookResponse } from '../model';
// @ts-ignore
import { ClockifyHookUpdateRequest } from '../model';
// @ts-ignore
import { JsonApiError } from '../model';
/**
 * ClockifyHookApi - axios parameter creator
 * @export
 */
export const ClockifyHookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a [Clockify Hook Resource](/schemas/ClockifyHookResource).
         * @summary Create Clockify Hook
         * @param {string} [include] The Include Query Parameter.
         * @param {ClockifyHookCreateRequest} [clockifyHookCreateRequest] Create Clockify Hook Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClockifyHook: async (include?: string, clockifyHookCreateRequest?: ClockifyHookCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/clockify_hooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clockifyHookCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a [Clockify Hook Resource](/schemas/ClockifyHookResource).
         * @summary Delete Clockify Hook
         * @param {string} clockifyHookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClockifyHook: async (clockifyHookId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clockifyHookId' is not null or undefined
            assertParamExists('deleteClockifyHook', 'clockifyHookId', clockifyHookId)
            const localVarPath = `/api/admin/clockify_hooks/{clockifyHookId}`
                .replace(`{${"clockifyHookId"}}`, encodeURIComponent(String(clockifyHookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a [Clockify Hook Resource](/schemas/ClockifyHookResource).
         * @summary Retrieve Clockify Hook
         * @param {string} clockifyHookId 
         * @param {string} [include] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClockifyHook: async (clockifyHookId: string, include?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clockifyHookId' is not null or undefined
            assertParamExists('getClockifyHook', 'clockifyHookId', clockifyHookId)
            const localVarPath = `/api/admin/clockify_hooks/{clockifyHookId}`
                .replace(`{${"clockifyHookId"}}`, encodeURIComponent(String(clockifyHookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the [Clockify Hook Resource](/schemas/ClockifyHookResource) collection.
         * @summary Retrieve Clockify Hook Collection
         * @param {number} [limit] The Limit Query Parameter. 
         * @param {number} [page] The Page Query Parameter. 
         * @param {string} [included] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClockifyHookCollection: async (limit?: number, page?: number, included?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/clockify_hooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (included !== undefined) {
                localVarQueryParameter['included'] = included;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a [Clockify Hook Resource](/schemas/ClockifyHookResource).
         * @summary Update Clockify Hook
         * @param {string} clockifyHookId 
         * @param {ClockifyHookUpdateRequest} [clockifyHookUpdateRequest] Update Clockify Hook Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClockifyHook: async (clockifyHookId: string, clockifyHookUpdateRequest?: ClockifyHookUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clockifyHookId' is not null or undefined
            assertParamExists('updateClockifyHook', 'clockifyHookId', clockifyHookId)
            const localVarPath = `/api/admin/clockify_hooks/{clockifyHookId}`
                .replace(`{${"clockifyHookId"}}`, encodeURIComponent(String(clockifyHookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clockifyHookUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClockifyHookApi - functional programming interface
 * @export
 */
export const ClockifyHookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClockifyHookApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a [Clockify Hook Resource](/schemas/ClockifyHookResource).
         * @summary Create Clockify Hook
         * @param {string} [include] The Include Query Parameter.
         * @param {ClockifyHookCreateRequest} [clockifyHookCreateRequest] Create Clockify Hook Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClockifyHook(include?: string, clockifyHookCreateRequest?: ClockifyHookCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClockifyHookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createClockifyHook(include, clockifyHookCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a [Clockify Hook Resource](/schemas/ClockifyHookResource).
         * @summary Delete Clockify Hook
         * @param {string} clockifyHookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClockifyHook(clockifyHookId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClockifyHook(clockifyHookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a [Clockify Hook Resource](/schemas/ClockifyHookResource).
         * @summary Retrieve Clockify Hook
         * @param {string} clockifyHookId 
         * @param {string} [include] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClockifyHook(clockifyHookId: string, include?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClockifyHookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClockifyHook(clockifyHookId, include, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the [Clockify Hook Resource](/schemas/ClockifyHookResource) collection.
         * @summary Retrieve Clockify Hook Collection
         * @param {number} [limit] The Limit Query Parameter. 
         * @param {number} [page] The Page Query Parameter. 
         * @param {string} [included] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClockifyHookCollection(limit?: number, page?: number, included?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClockifyHookCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClockifyHookCollection(limit, page, included, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a [Clockify Hook Resource](/schemas/ClockifyHookResource).
         * @summary Update Clockify Hook
         * @param {string} clockifyHookId 
         * @param {ClockifyHookUpdateRequest} [clockifyHookUpdateRequest] Update Clockify Hook Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClockifyHook(clockifyHookId: string, clockifyHookUpdateRequest?: ClockifyHookUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClockifyHook(clockifyHookId, clockifyHookUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClockifyHookApi - factory interface
 * @export
 */
export const ClockifyHookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClockifyHookApiFp(configuration)
    return {
        /**
         * Creates a [Clockify Hook Resource](/schemas/ClockifyHookResource).
         * @summary Create Clockify Hook
         * @param {ClockifyHookApiCreateClockifyHookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClockifyHook(requestParameters: ClockifyHookApiCreateClockifyHookRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ClockifyHookResponse> {
            return localVarFp.createClockifyHook(requestParameters.include, requestParameters.clockifyHookCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a [Clockify Hook Resource](/schemas/ClockifyHookResource).
         * @summary Delete Clockify Hook
         * @param {ClockifyHookApiDeleteClockifyHookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClockifyHook(requestParameters: ClockifyHookApiDeleteClockifyHookRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteClockifyHook(requestParameters.clockifyHookId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a [Clockify Hook Resource](/schemas/ClockifyHookResource).
         * @summary Retrieve Clockify Hook
         * @param {ClockifyHookApiGetClockifyHookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClockifyHook(requestParameters: ClockifyHookApiGetClockifyHookRequest, options?: AxiosRequestConfig): AxiosPromise<ClockifyHookResponse> {
            return localVarFp.getClockifyHook(requestParameters.clockifyHookId, requestParameters.include, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the [Clockify Hook Resource](/schemas/ClockifyHookResource) collection.
         * @summary Retrieve Clockify Hook Collection
         * @param {ClockifyHookApiGetClockifyHookCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClockifyHookCollection(requestParameters: ClockifyHookApiGetClockifyHookCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ClockifyHookCollectionResponse> {
            return localVarFp.getClockifyHookCollection(requestParameters.limit, requestParameters.page, requestParameters.included, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a [Clockify Hook Resource](/schemas/ClockifyHookResource).
         * @summary Update Clockify Hook
         * @param {ClockifyHookApiUpdateClockifyHookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClockifyHook(requestParameters: ClockifyHookApiUpdateClockifyHookRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateClockifyHook(requestParameters.clockifyHookId, requestParameters.clockifyHookUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createClockifyHook operation in ClockifyHookApi.
 * @export
 * @interface ClockifyHookApiCreateClockifyHookRequest
 */
export interface ClockifyHookApiCreateClockifyHookRequest {
    /**
     * The Include Query Parameter.
     * @type {string}
     * @memberof ClockifyHookApiCreateClockifyHook
     */
    readonly include?: string

    /**
     * Create Clockify Hook Request
     * @type {ClockifyHookCreateRequest}
     * @memberof ClockifyHookApiCreateClockifyHook
     */
    readonly clockifyHookCreateRequest?: ClockifyHookCreateRequest
}

/**
 * Request parameters for deleteClockifyHook operation in ClockifyHookApi.
 * @export
 * @interface ClockifyHookApiDeleteClockifyHookRequest
 */
export interface ClockifyHookApiDeleteClockifyHookRequest {
    /**
     * 
     * @type {string}
     * @memberof ClockifyHookApiDeleteClockifyHook
     */
    readonly clockifyHookId: string
}

/**
 * Request parameters for getClockifyHook operation in ClockifyHookApi.
 * @export
 * @interface ClockifyHookApiGetClockifyHookRequest
 */
export interface ClockifyHookApiGetClockifyHookRequest {
    /**
     * 
     * @type {string}
     * @memberof ClockifyHookApiGetClockifyHook
     */
    readonly clockifyHookId: string

    /**
     * The Include Query Parameter.
     * @type {string}
     * @memberof ClockifyHookApiGetClockifyHook
     */
    readonly include?: string
}

/**
 * Request parameters for getClockifyHookCollection operation in ClockifyHookApi.
 * @export
 * @interface ClockifyHookApiGetClockifyHookCollectionRequest
 */
export interface ClockifyHookApiGetClockifyHookCollectionRequest {
    /**
     * The Limit Query Parameter. 
     * @type {number}
     * @memberof ClockifyHookApiGetClockifyHookCollection
     */
    readonly limit?: number

    /**
     * The Page Query Parameter. 
     * @type {number}
     * @memberof ClockifyHookApiGetClockifyHookCollection
     */
    readonly page?: number

    /**
     * The Include Query Parameter.
     * @type {string}
     * @memberof ClockifyHookApiGetClockifyHookCollection
     */
    readonly included?: string
}

/**
 * Request parameters for updateClockifyHook operation in ClockifyHookApi.
 * @export
 * @interface ClockifyHookApiUpdateClockifyHookRequest
 */
export interface ClockifyHookApiUpdateClockifyHookRequest {
    /**
     * 
     * @type {string}
     * @memberof ClockifyHookApiUpdateClockifyHook
     */
    readonly clockifyHookId: string

    /**
     * Update Clockify Hook Request
     * @type {ClockifyHookUpdateRequest}
     * @memberof ClockifyHookApiUpdateClockifyHook
     */
    readonly clockifyHookUpdateRequest?: ClockifyHookUpdateRequest
}

/**
 * ClockifyHookApi - object-oriented interface
 * @export
 * @class ClockifyHookApi
 * @extends {BaseAPI}
 */
export class ClockifyHookApi extends BaseAPI {
    /**
     * Creates a [Clockify Hook Resource](/schemas/ClockifyHookResource).
     * @summary Create Clockify Hook
     * @param {ClockifyHookApiCreateClockifyHookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClockifyHookApi
     */
    public createClockifyHook(requestParameters: ClockifyHookApiCreateClockifyHookRequest = {}, options?: AxiosRequestConfig) {
        return ClockifyHookApiFp(this.configuration).createClockifyHook(requestParameters.include, requestParameters.clockifyHookCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a [Clockify Hook Resource](/schemas/ClockifyHookResource).
     * @summary Delete Clockify Hook
     * @param {ClockifyHookApiDeleteClockifyHookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClockifyHookApi
     */
    public deleteClockifyHook(requestParameters: ClockifyHookApiDeleteClockifyHookRequest, options?: AxiosRequestConfig) {
        return ClockifyHookApiFp(this.configuration).deleteClockifyHook(requestParameters.clockifyHookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a [Clockify Hook Resource](/schemas/ClockifyHookResource).
     * @summary Retrieve Clockify Hook
     * @param {ClockifyHookApiGetClockifyHookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClockifyHookApi
     */
    public getClockifyHook(requestParameters: ClockifyHookApiGetClockifyHookRequest, options?: AxiosRequestConfig) {
        return ClockifyHookApiFp(this.configuration).getClockifyHook(requestParameters.clockifyHookId, requestParameters.include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the [Clockify Hook Resource](/schemas/ClockifyHookResource) collection.
     * @summary Retrieve Clockify Hook Collection
     * @param {ClockifyHookApiGetClockifyHookCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClockifyHookApi
     */
    public getClockifyHookCollection(requestParameters: ClockifyHookApiGetClockifyHookCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ClockifyHookApiFp(this.configuration).getClockifyHookCollection(requestParameters.limit, requestParameters.page, requestParameters.included, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a [Clockify Hook Resource](/schemas/ClockifyHookResource).
     * @summary Update Clockify Hook
     * @param {ClockifyHookApiUpdateClockifyHookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClockifyHookApi
     */
    public updateClockifyHook(requestParameters: ClockifyHookApiUpdateClockifyHookRequest, options?: AxiosRequestConfig) {
        return ClockifyHookApiFp(this.configuration).updateClockifyHook(requestParameters.clockifyHookId, requestParameters.clockifyHookUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
