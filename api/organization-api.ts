/* tslint:disable */
/* eslint-disable */
/**
 * skriptfabrik API
 * This is the specification for the skriptfabrik API.
 *
 * The version of the OpenAPI document: 2.1.0+e417cb8
 * Contact: info@skriptfabrik.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JsonApiError } from '../model';
// @ts-ignore
import { OrganizationCollectionResponse } from '../model';
// @ts-ignore
import { OrganizationResponse } from '../model';
/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export const OrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a [Organization Resource](/schemas/OrganizationResource).
         * @summary Retrieve Organization
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganization', 'organizationId', organizationId)
            const localVarPath = `/api/admin/organizations/{organizationId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the [Organization Resource](/schemas/OrganizationResource) collection.
         * @summary Retrieve Organization Collection
         * @param {number} [limit] The Limit Query Parameter. 
         * @param {number} [page] The Page Query Parameter. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationCollection: async (limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a [Organization Resource](/schemas/OrganizationResource).
         * @summary Retrieve Organization
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganization(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the [Organization Resource](/schemas/OrganizationResource) collection.
         * @summary Retrieve Organization Collection
         * @param {number} [limit] The Limit Query Parameter. 
         * @param {number} [page] The Page Query Parameter. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationCollection(limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationCollection(limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationApiFp(configuration)
    return {
        /**
         * Retrieves a [Organization Resource](/schemas/OrganizationResource).
         * @summary Retrieve Organization
         * @param {OrganizationApiGetOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(requestParameters: OrganizationApiGetOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationResponse> {
            return localVarFp.getOrganization(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the [Organization Resource](/schemas/OrganizationResource) collection.
         * @summary Retrieve Organization Collection
         * @param {OrganizationApiGetOrganizationCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationCollection(requestParameters: OrganizationApiGetOrganizationCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<OrganizationCollectionResponse> {
            return localVarFp.getOrganizationCollection(requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getOrganization operation in OrganizationApi.
 * @export
 * @interface OrganizationApiGetOrganizationRequest
 */
export interface OrganizationApiGetOrganizationRequest {
    /**
     * 
     * @type {string}
     * @memberof OrganizationApiGetOrganization
     */
    readonly organizationId: string
}

/**
 * Request parameters for getOrganizationCollection operation in OrganizationApi.
 * @export
 * @interface OrganizationApiGetOrganizationCollectionRequest
 */
export interface OrganizationApiGetOrganizationCollectionRequest {
    /**
     * The Limit Query Parameter. 
     * @type {number}
     * @memberof OrganizationApiGetOrganizationCollection
     */
    readonly limit?: number

    /**
     * The Page Query Parameter. 
     * @type {number}
     * @memberof OrganizationApiGetOrganizationCollection
     */
    readonly page?: number
}

/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export class OrganizationApi extends BaseAPI {
    /**
     * Retrieves a [Organization Resource](/schemas/OrganizationResource).
     * @summary Retrieve Organization
     * @param {OrganizationApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public getOrganization(requestParameters: OrganizationApiGetOrganizationRequest, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getOrganization(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the [Organization Resource](/schemas/OrganizationResource) collection.
     * @summary Retrieve Organization Collection
     * @param {OrganizationApiGetOrganizationCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public getOrganizationCollection(requestParameters: OrganizationApiGetOrganizationCollectionRequest = {}, options?: AxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getOrganizationCollection(requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}
