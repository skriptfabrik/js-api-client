/* tslint:disable */
/* eslint-disable */
/**
 * skriptfabrik API
 * This is the specification for the skriptfabrik API.
 *
 * The version of the OpenAPI document: 2.1.0+e417cb8
 * Contact: info@skriptfabrik.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JsonApiError } from '../model';
// @ts-ignore
import { MocoSettingsCollectionResponse } from '../model';
// @ts-ignore
import { MocoSettingsCreateRequest } from '../model';
// @ts-ignore
import { MocoSettingsResponse } from '../model';
// @ts-ignore
import { MocoSettingsUpdateRequest } from '../model';
/**
 * MOCOSettingsApi - axios parameter creator
 * @export
 */
export const MOCOSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a [MOCO Settings Resource](/schemas/MocoSettingsResource).
         * @summary Create MOCO Settings
         * @param {string} [include] The Include Query Parameter.
         * @param {MocoSettingsCreateRequest} [mocoSettingsCreateRequest] Create MOCO Settings Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMocoSettings: async (include?: string, mocoSettingsCreateRequest?: MocoSettingsCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/moco_settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mocoSettingsCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a [MOCO Settings Resource](/schemas/MocoSettingsResource).
         * @summary Delete MOCO Settings
         * @param {string} mocoSettingsId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMocoSettings: async (mocoSettingsId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mocoSettingsId' is not null or undefined
            assertParamExists('deleteMocoSettings', 'mocoSettingsId', mocoSettingsId)
            const localVarPath = `/api/admin/moco_settings/{mocoSettingsId}`
                .replace(`{${"mocoSettingsId"}}`, encodeURIComponent(String(mocoSettingsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a [MOCO Settings Resource](/schemas/MocoSettingsResource).
         * @summary Retrieve MOCO Settings
         * @param {string} mocoSettingsId 
         * @param {string} [include] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMocoSettings: async (mocoSettingsId: string, include?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mocoSettingsId' is not null or undefined
            assertParamExists('getMocoSettings', 'mocoSettingsId', mocoSettingsId)
            const localVarPath = `/api/admin/moco_settings/{mocoSettingsId}`
                .replace(`{${"mocoSettingsId"}}`, encodeURIComponent(String(mocoSettingsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the [MOCO Settings Resource](/schemas/MocoSettingsResource) collection.
         * @summary Retrieve MOCO Settings Collection
         * @param {number} [limit] The Limit Query Parameter. 
         * @param {number} [page] The Page Query Parameter. 
         * @param {string} [included] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMocoSettingsCollection: async (limit?: number, page?: number, included?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/moco_settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (included !== undefined) {
                localVarQueryParameter['included'] = included;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a [MOCO Settings Resource](/schemas/MocoSettingsResource).
         * @summary Update MOCO Settings
         * @param {string} mocoSettingsId 
         * @param {MocoSettingsUpdateRequest} [mocoSettingsUpdateRequest] Update MOCO Settings Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMocoSettings: async (mocoSettingsId: string, mocoSettingsUpdateRequest?: MocoSettingsUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mocoSettingsId' is not null or undefined
            assertParamExists('updateMocoSettings', 'mocoSettingsId', mocoSettingsId)
            const localVarPath = `/api/admin/moco_settings/{mocoSettingsId}`
                .replace(`{${"mocoSettingsId"}}`, encodeURIComponent(String(mocoSettingsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mocoSettingsUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MOCOSettingsApi - functional programming interface
 * @export
 */
export const MOCOSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MOCOSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a [MOCO Settings Resource](/schemas/MocoSettingsResource).
         * @summary Create MOCO Settings
         * @param {string} [include] The Include Query Parameter.
         * @param {MocoSettingsCreateRequest} [mocoSettingsCreateRequest] Create MOCO Settings Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMocoSettings(include?: string, mocoSettingsCreateRequest?: MocoSettingsCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MocoSettingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMocoSettings(include, mocoSettingsCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a [MOCO Settings Resource](/schemas/MocoSettingsResource).
         * @summary Delete MOCO Settings
         * @param {string} mocoSettingsId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMocoSettings(mocoSettingsId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMocoSettings(mocoSettingsId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a [MOCO Settings Resource](/schemas/MocoSettingsResource).
         * @summary Retrieve MOCO Settings
         * @param {string} mocoSettingsId 
         * @param {string} [include] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMocoSettings(mocoSettingsId: string, include?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MocoSettingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMocoSettings(mocoSettingsId, include, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the [MOCO Settings Resource](/schemas/MocoSettingsResource) collection.
         * @summary Retrieve MOCO Settings Collection
         * @param {number} [limit] The Limit Query Parameter. 
         * @param {number} [page] The Page Query Parameter. 
         * @param {string} [included] The Include Query Parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMocoSettingsCollection(limit?: number, page?: number, included?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MocoSettingsCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMocoSettingsCollection(limit, page, included, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a [MOCO Settings Resource](/schemas/MocoSettingsResource).
         * @summary Update MOCO Settings
         * @param {string} mocoSettingsId 
         * @param {MocoSettingsUpdateRequest} [mocoSettingsUpdateRequest] Update MOCO Settings Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMocoSettings(mocoSettingsId: string, mocoSettingsUpdateRequest?: MocoSettingsUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMocoSettings(mocoSettingsId, mocoSettingsUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MOCOSettingsApi - factory interface
 * @export
 */
export const MOCOSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MOCOSettingsApiFp(configuration)
    return {
        /**
         * Creates a [MOCO Settings Resource](/schemas/MocoSettingsResource).
         * @summary Create MOCO Settings
         * @param {MOCOSettingsApiCreateMocoSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMocoSettings(requestParameters: MOCOSettingsApiCreateMocoSettingsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MocoSettingsResponse> {
            return localVarFp.createMocoSettings(requestParameters.include, requestParameters.mocoSettingsCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a [MOCO Settings Resource](/schemas/MocoSettingsResource).
         * @summary Delete MOCO Settings
         * @param {MOCOSettingsApiDeleteMocoSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMocoSettings(requestParameters: MOCOSettingsApiDeleteMocoSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMocoSettings(requestParameters.mocoSettingsId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a [MOCO Settings Resource](/schemas/MocoSettingsResource).
         * @summary Retrieve MOCO Settings
         * @param {MOCOSettingsApiGetMocoSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMocoSettings(requestParameters: MOCOSettingsApiGetMocoSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<MocoSettingsResponse> {
            return localVarFp.getMocoSettings(requestParameters.mocoSettingsId, requestParameters.include, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the [MOCO Settings Resource](/schemas/MocoSettingsResource) collection.
         * @summary Retrieve MOCO Settings Collection
         * @param {MOCOSettingsApiGetMocoSettingsCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMocoSettingsCollection(requestParameters: MOCOSettingsApiGetMocoSettingsCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MocoSettingsCollectionResponse> {
            return localVarFp.getMocoSettingsCollection(requestParameters.limit, requestParameters.page, requestParameters.included, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a [MOCO Settings Resource](/schemas/MocoSettingsResource).
         * @summary Update MOCO Settings
         * @param {MOCOSettingsApiUpdateMocoSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMocoSettings(requestParameters: MOCOSettingsApiUpdateMocoSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMocoSettings(requestParameters.mocoSettingsId, requestParameters.mocoSettingsUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createMocoSettings operation in MOCOSettingsApi.
 * @export
 * @interface MOCOSettingsApiCreateMocoSettingsRequest
 */
export interface MOCOSettingsApiCreateMocoSettingsRequest {
    /**
     * The Include Query Parameter.
     * @type {string}
     * @memberof MOCOSettingsApiCreateMocoSettings
     */
    readonly include?: string

    /**
     * Create MOCO Settings Request
     * @type {MocoSettingsCreateRequest}
     * @memberof MOCOSettingsApiCreateMocoSettings
     */
    readonly mocoSettingsCreateRequest?: MocoSettingsCreateRequest
}

/**
 * Request parameters for deleteMocoSettings operation in MOCOSettingsApi.
 * @export
 * @interface MOCOSettingsApiDeleteMocoSettingsRequest
 */
export interface MOCOSettingsApiDeleteMocoSettingsRequest {
    /**
     * 
     * @type {string}
     * @memberof MOCOSettingsApiDeleteMocoSettings
     */
    readonly mocoSettingsId: string
}

/**
 * Request parameters for getMocoSettings operation in MOCOSettingsApi.
 * @export
 * @interface MOCOSettingsApiGetMocoSettingsRequest
 */
export interface MOCOSettingsApiGetMocoSettingsRequest {
    /**
     * 
     * @type {string}
     * @memberof MOCOSettingsApiGetMocoSettings
     */
    readonly mocoSettingsId: string

    /**
     * The Include Query Parameter.
     * @type {string}
     * @memberof MOCOSettingsApiGetMocoSettings
     */
    readonly include?: string
}

/**
 * Request parameters for getMocoSettingsCollection operation in MOCOSettingsApi.
 * @export
 * @interface MOCOSettingsApiGetMocoSettingsCollectionRequest
 */
export interface MOCOSettingsApiGetMocoSettingsCollectionRequest {
    /**
     * The Limit Query Parameter. 
     * @type {number}
     * @memberof MOCOSettingsApiGetMocoSettingsCollection
     */
    readonly limit?: number

    /**
     * The Page Query Parameter. 
     * @type {number}
     * @memberof MOCOSettingsApiGetMocoSettingsCollection
     */
    readonly page?: number

    /**
     * The Include Query Parameter.
     * @type {string}
     * @memberof MOCOSettingsApiGetMocoSettingsCollection
     */
    readonly included?: string
}

/**
 * Request parameters for updateMocoSettings operation in MOCOSettingsApi.
 * @export
 * @interface MOCOSettingsApiUpdateMocoSettingsRequest
 */
export interface MOCOSettingsApiUpdateMocoSettingsRequest {
    /**
     * 
     * @type {string}
     * @memberof MOCOSettingsApiUpdateMocoSettings
     */
    readonly mocoSettingsId: string

    /**
     * Update MOCO Settings Request
     * @type {MocoSettingsUpdateRequest}
     * @memberof MOCOSettingsApiUpdateMocoSettings
     */
    readonly mocoSettingsUpdateRequest?: MocoSettingsUpdateRequest
}

/**
 * MOCOSettingsApi - object-oriented interface
 * @export
 * @class MOCOSettingsApi
 * @extends {BaseAPI}
 */
export class MOCOSettingsApi extends BaseAPI {
    /**
     * Creates a [MOCO Settings Resource](/schemas/MocoSettingsResource).
     * @summary Create MOCO Settings
     * @param {MOCOSettingsApiCreateMocoSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MOCOSettingsApi
     */
    public createMocoSettings(requestParameters: MOCOSettingsApiCreateMocoSettingsRequest = {}, options?: AxiosRequestConfig) {
        return MOCOSettingsApiFp(this.configuration).createMocoSettings(requestParameters.include, requestParameters.mocoSettingsCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a [MOCO Settings Resource](/schemas/MocoSettingsResource).
     * @summary Delete MOCO Settings
     * @param {MOCOSettingsApiDeleteMocoSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MOCOSettingsApi
     */
    public deleteMocoSettings(requestParameters: MOCOSettingsApiDeleteMocoSettingsRequest, options?: AxiosRequestConfig) {
        return MOCOSettingsApiFp(this.configuration).deleteMocoSettings(requestParameters.mocoSettingsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a [MOCO Settings Resource](/schemas/MocoSettingsResource).
     * @summary Retrieve MOCO Settings
     * @param {MOCOSettingsApiGetMocoSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MOCOSettingsApi
     */
    public getMocoSettings(requestParameters: MOCOSettingsApiGetMocoSettingsRequest, options?: AxiosRequestConfig) {
        return MOCOSettingsApiFp(this.configuration).getMocoSettings(requestParameters.mocoSettingsId, requestParameters.include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the [MOCO Settings Resource](/schemas/MocoSettingsResource) collection.
     * @summary Retrieve MOCO Settings Collection
     * @param {MOCOSettingsApiGetMocoSettingsCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MOCOSettingsApi
     */
    public getMocoSettingsCollection(requestParameters: MOCOSettingsApiGetMocoSettingsCollectionRequest = {}, options?: AxiosRequestConfig) {
        return MOCOSettingsApiFp(this.configuration).getMocoSettingsCollection(requestParameters.limit, requestParameters.page, requestParameters.included, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a [MOCO Settings Resource](/schemas/MocoSettingsResource).
     * @summary Update MOCO Settings
     * @param {MOCOSettingsApiUpdateMocoSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MOCOSettingsApi
     */
    public updateMocoSettings(requestParameters: MOCOSettingsApiUpdateMocoSettingsRequest, options?: AxiosRequestConfig) {
        return MOCOSettingsApiFp(this.configuration).updateMocoSettings(requestParameters.mocoSettingsId, requestParameters.mocoSettingsUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
